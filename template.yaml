AWSTemplateFormatVersion: '2010-09-09'
Description: >-
  safe-scheme-api
Transform: 'AWS::Serverless-2016-10-31'

Globals:
  Function:
    Runtime: nodejs20.x
    Architectures:
      - x86_64
    MemorySize: 128
    Tracing: Active
    Timeout: 100
    Environment:
      Variables:
        PROJECTS_TABLE: !Ref ProjectsTable
        USER_POOL_ID: !Ref SafeSchemeUserPool
        CLIENT_ID: !Ref SafeSchemeUserPoolClient
        DYNAMODB_ENDPOINT: http://safe-scheme-db:8000
  Api:
    TracingEnabled: true

Resources:
  SafeSchemeAPI:
    Type: AWS::Serverless::Api
    Properties:
      Name: SafeSchemeAPI
      Description: API for Safe Scheme Application
      StageName: prod
      GatewayResponses:
        DEFAULT_4XX:
          StatusCode: 404
        UNAUTHORIZED:
          StatusCode: 401
          ResponseTemplates:
            application/json: {"message": "Invalid or expired token"}
      Auth:
        DefaultAuthorizer: CognitoAuthorizer
        Authorizers:
          CognitoAuthorizer:
            UserPoolArn:
              Fn::GetAtt: [ SafeSchemeUserPool, Arn ]
            Identity:
              Header: Authorization  # Automatically expects the token in the 'Authorization' header
              ValidationExpression: Bearer.*
            AuthorizationScopes:
              - openid
              - profile
              - email
      Models:
        User:
          type: object
          required:
            - UserId
          properties:
            UserId:
              type: string
        Project:
          type: object
          required:
            - UserId
            - ProjectId
          properties:
            UserId:
              type: string
            ProjectId:
              type: string
            ProjectName:
              type: string
            Tasks:
              type: list
        Task:
          type: object
          required:
            - ProjectId
            - TaskId
            - TaskName
          properties:
            ProjectId:
              type: string
            TaskId:
              type: string

  getProjectsFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: src/handlers/get-projects.getProjectsHandler
      Description: Get user projects function
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref ProjectsTable
      Events:
        Api:
          Type: Api
          Properties:
            RestApiId: !Ref SafeSchemeAPI
            Path: /get-projects/{UserId}
            Method: GET
            RequestModel:
              Model: Project
              Required: true
              ValidateBody: true

  createProjectFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: src/handlers/create-project.createProjectHandler
      Description: Create project function
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref ProjectsTable
      Events:
        Api:
          Type: Api
          Properties:
            RestApiId: !Ref SafeSchemeAPI
            Path: /create-project
            Method: POST
            RequestParameters:
              - method.request.body
            RequestModel:
              Model: Project
              Required: true
              ValidateBody: true

  deleteProjectsFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: src/handlers/delete-project.deleteProjectHandler
      Description: Delete project function
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref ProjectsTable
      Events:
        Api:
          Type: Api
          Properties:
            RestApiId: !Ref SafeSchemeAPI
            Path: /delete-project/{ProjectId}
            RequestParameters:
              - method.request.path.userId:
                  Required: false
                  Caching: false
            Method: DELETE
            RequestModel:
              Model: Project
              Required: true
              ValidateBody: true

  editProjectFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: src/handlers/edit-project.editProjectHandler
      Description: Edit project function
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref ProjectsTable
      Events:
        Api:
          Type: Api
          Properties:
            RestApiId: !Ref SafeSchemeAPI
            Path: /edit-project/{ProjectId}
            RequestParameters:
              - method.request.path.projectId:
                  Required: false
                  Caching: false
            Method: PUT
            RequestModel:
              Model: Project
              Required: true
              ValidateBody: true

  ProjectsTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub "ProjectsTable-${AWS::StackName}"
      AttributeDefinitions:
        - AttributeName: UserId
          AttributeType: S
        - AttributeName: ProjectId
          AttributeType: S
      KeySchema:
        - AttributeName: UserId
          KeyType: HASH
        - AttributeName: ProjectId
          KeyType: RANGE
      BillingMode: PAY_PER_REQUEST

  SafeSchemeUserPool:
    Type: AWS::Cognito::UserPool
    Properties:
      UserPoolName: SafeSchemeUserPool
      AccountRecoverySetting:
        RecoveryMechanisms:
          - Name: verified_email
            Priority: 1
          - Name: verified_phone_number
            Priority: 2
      Policies:
        PasswordPolicy:
          MinimumLength: 8
          RequireUppercase: true
          RequireNumbers: true
          RequireSymbols: true
      UsernameAttributes:
        - email
      Schema:
        - AttributeDataType: String
          Name: email
          Required: true

  SafeSchemeUserPoolClient:
    Type: AWS::Cognito::UserPoolClient
    Properties:
      UserPoolId: !Ref SafeSchemeUserPool
      ClientName: SafeSchemeUserPoolClient
      GenerateSecret: false
      AllowedOAuthFlows:
        - code
      AllowedOAuthScopes:
        - openid
        - profile
        - email
      AllowedOAuthFlowsUserPoolClient: true
      CallbackURLs:
        - https://staging.d28alr4nb9gk3w.amplifyapp.com/callback
      LogoutURLs:
        - https://staging.d28alr4nb9gk3w.amplifyapp.com/logout
      ExplicitAuthFlows:
        - ALLOW_USER_SRP_AUTH
        - ALLOW_REFRESH_TOKEN_AUTH
      SupportedIdentityProviders:
        - COGNITO

  ApplicationResourceGroup:
    Type: AWS::ResourceGroups::Group
    Properties:
      Name: !Sub "ApplicationInsights-SAM-${AWS::StackName}"
      ResourceQuery:
        Type: CLOUDFORMATION_STACK_1_0

  ApplicationInsightsMonitoring:
    Type: AWS::ApplicationInsights::Application
    Properties:
      ResourceGroupName: !Ref ApplicationResourceGroup
      AutoConfigurationEnabled: true

Outputs:
  WebEndpoint:
    Description: API Gateway endpoint URL for Prod stage
    Value: !Sub "https://${SafeSchemeAPI}.execute-api.${AWS::Region}.amazonaws.com/prod/"

  UserPoolId:
    Value: !Ref SafeSchemeUserPool
    Description: 'Cognito User Pool ID'

  UserPoolClientId:
    Value: !Ref SafeSchemeUserPoolClient
    Description: 'Cognito User Pool Client ID'
